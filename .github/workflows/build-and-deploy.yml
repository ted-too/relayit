name: Build and Push to GitHub Packages

on:
  push:
    branches:
      - main
      - dev
  release:
    types: [published]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.changes.outputs.api }}
      worker: ${{ steps.changes.outputs.worker }}
      web: ${{ steps.changes.outputs.web }}
      docs: ${{ steps.changes.outputs.docs }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            api:
              - 'apps/api/**'
              - 'packages/**'
              - 'bun.lock'
              - '.github/workflows/**'
            worker:
              - 'apps/worker/**'
              - 'packages/**'
              - 'bun.lock'
              - '.github/workflows/**'
            web:
              - 'apps/web/**'
              - 'packages/**'
              - 'bun.lock'
              - '.github/workflows/**'
            docs:
              - 'apps/docs/**'
              - 'packages/**'
              - 'bun.lock'
              - '.github/workflows/**'

  build-and-push:
    needs: changes
    runs-on: ubuntu-latest
    timeout-minutes: 45
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        app: [api, worker, web, docs]
        include:
          - app: api
            dockerfile: apps/api/Dockerfile
            context: .
          - app: worker
            dockerfile: apps/worker/Dockerfile
            context: .
          - app: web
            dockerfile: apps/web/Dockerfile
            context: .
          - app: docs
            dockerfile: apps/docs/Dockerfile
            context: .
    
    steps:
      - name: Check if app changed
        id: check-changes
        run: |
          if [ "${{ matrix.app }}" = "api" ] && [ "${{ needs.changes.outputs.api }}" = "false" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.app }}" = "worker" ] && [ "${{ needs.changes.outputs.worker }}" = "false" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.app }}" = "web" ] && [ "${{ needs.changes.outputs.web }}" = "false" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.app }}" = "docs" ] && [ "${{ needs.changes.outputs.docs }}" = "false" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        if: steps.check-changes.outputs.skip == 'false'
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        if: steps.check-changes.outputs.skip == 'false'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: steps.check-changes.outputs.skip == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Generate tags
        if: steps.check-changes.outputs.skip == 'false'
        id: tags
        run: |
          REPO_NAME="${{ github.repository_owner }}/relayit-${{ matrix.app }}"
          
          # Base tags
          TAGS="${{ env.REGISTRY }}/${REPO_NAME}:${GITHUB_SHA::8}"
          
          # Add branch-specific tags
          if [ "${{ github.ref_name }}" = "main" ]; then
            TAGS="${TAGS},${{ env.REGISTRY }}/${REPO_NAME}:latest"
          elif [ "${{ github.ref_name }}" = "dev" ]; then
            TAGS="${TAGS},${{ env.REGISTRY }}/${REPO_NAME}:dev"
          fi
          
          # Add release tag for releases
          if [ "${{ github.event_name }}" = "release" ]; then
            TAGS="${TAGS},${{ env.REGISTRY }}/${REPO_NAME}:${{ github.event.release.tag_name }}"
          fi
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "repo-name=${REPO_NAME}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        if: steps.check-changes.outputs.skip == 'false'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
            TURBO_TEAM=${{ secrets.TURBO_TEAM }}
            ${{ (matrix.app == 'docs' || matrix.app == 'web') && format('API_URL={0}', vars.API_URL) || '' }}
            ${{ (matrix.app == 'docs' || matrix.app == 'web') && format('WEB_URL={0}', vars.WEB_URL) || '' }}
            ${{ (matrix.app == 'docs' || matrix.app == 'web') && format('DOCS_URL={0}', vars.DOCS_URL) || '' }}

      - name: Output image details
        if: steps.check-changes.outputs.skip == 'false'
        run: |
          echo "üöÄ Built and pushed ${{ steps.tags.outputs.repo-name }}"
          echo "üì¶ Tags: ${{ steps.tags.outputs.tags }}"
          echo "üîó Registry: ${{ env.REGISTRY }}"

      - name: Trigger Dokploy deployment
        if: steps.check-changes.outputs.skip == 'false' && github.ref_name == 'main'
        continue-on-error: true
        run: |
          # Get the appropriate Dokploy application ID for this app
          APPLICATION_ID=""
          case "${{ matrix.app }}" in
            "api")
              APPLICATION_ID="${{ secrets.DOKPLOY_APP_ID_API }}"
              ;;
            "worker")
              APPLICATION_ID="${{ secrets.DOKPLOY_APP_ID_WORKER }}"
              ;;
            "web")
              APPLICATION_ID="${{ secrets.DOKPLOY_APP_ID_WEB }}"
              ;;
            "docs")
              APPLICATION_ID="${{ secrets.DOKPLOY_APP_ID_DOCS }}"
              ;;
          esac
          
          # Only trigger deployment if application ID is configured
          if [ ! -z "$APPLICATION_ID" ] && [ ! -z "${{ secrets.DOKPLOY_TOKEN }}" ] && [ ! -z "${{ secrets.DOKPLOY_URL }}" ]; then
            echo "üöÄ Triggering Dokploy deployment for ${{ matrix.app }} (ID: $APPLICATION_ID)"
            
            # Trigger deployment using Dokploy API
            RESPONSE=$(curl -X POST "${{ secrets.DOKPLOY_URL }}/api/application.deploy" \
              -H "accept: application/json" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.DOKPLOY_TOKEN }}" \
              -d "{\"applicationId\": \"$APPLICATION_ID\"}" \
              --max-time 30 \
              --retry 2 \
              --fail-with-body \
              --write-out "HTTPSTATUS:%{http_code}" \
              --silent)
            
            HTTP_CODE=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
            HTTP_BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//g')
            
            if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
              echo "‚úÖ Dokploy deployment triggered successfully for ${{ matrix.app }}"
              echo "üìã Response: $HTTP_BODY"
            else
              echo "‚ùå Failed to trigger Dokploy deployment for ${{ matrix.app }}"
              echo "üìã HTTP Code: $HTTP_CODE"
              echo "üìã Response: $HTTP_BODY"
            fi
          else
            echo "‚ÑπÔ∏è  Missing Dokploy configuration for ${{ matrix.app }}, skipping deployment trigger"
            echo "    Required: DOKPLOY_TOKEN, DOKPLOY_URL, and DOKPLOY_APP_ID_$(echo ${{ matrix.app }} | tr '[:lower:]' '[:upper:]')"
          fi 