name: Tag Release Images

on:
  release:
    types: [published]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  tag-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [api, worker, web]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract PR number from merge commit
        id: extract-pr
        run: |
          # Try multiple patterns to extract PR number
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "üîç Analyzing commit: $COMMIT_MSG"
          
          # Pattern 1: Squash merge - "feat: add feature (#123)"
          PR_NUMBER=$(echo "$COMMIT_MSG" | grep -oE '\(#([0-9]+)\)' | grep -oE '[0-9]+' || echo "")
          
          # Pattern 2: Merge commit - "Merge pull request #123 from..."
          if [ -z "$PR_NUMBER" ]; then
            PR_NUMBER=$(echo "$COMMIT_MSG" | grep -oE 'pull request #([0-9]+)' | grep -oE '[0-9]+' || echo "")
          fi
          
          # Pattern 3: Look at merge commit parents (if it's a merge commit)
          if [ -z "$PR_NUMBER" ]; then
            # Check if this is a merge commit by looking for PR in merge message
            PR_NUMBER=$(git log --merges -1 --pretty=format:"%s" | grep -oE '#([0-9]+)' | grep -oE '[0-9]+' | head -1 || echo "")
          fi
          
          if [ -n "$PR_NUMBER" ]; then
            echo "pr-number=${PR_NUMBER}" >> $GITHUB_OUTPUT
            echo "‚úÖ Found PR number: $PR_NUMBER"
          else
            echo "‚ö†Ô∏è No PR number found in commit message (likely direct commit)"
            echo "üîß Will build from scratch instead of retagging"
            echo "pr-number=" >> $GITHUB_OUTPUT
          fi

      - name: Normalize repository name
        id: normalize-repo
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          
          # Normalize repository owner to lowercase for GHCR compatibility
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME="${REPO_OWNER_LOWER}/relayit-${{ matrix.app }}"
          echo "repo-name=${REPO_NAME}" >> $GITHUB_OUTPUT
          echo "üì¶ Normalized repo name: ${REPO_NAME}"

      - name: Validate release tag format
        id: validate-tag
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          
          VERSION="${{ github.event.release.tag_name }}"
          echo "üîç Validating release tag format: $VERSION"
          
          # Expected format: v?X.Y.Z(-prerelease)?
          # Examples: v1.0.0, 1.0.0, v0.1.0-alpha.1, 2.0.0-beta.2
          if echo "$VERSION" | grep -qE '^v?[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.-]+)?$'; then
            echo "‚úÖ Valid semantic version tag: $VERSION"
            
            # Strip 'v' prefix if present for clean version
            CLEAN_VERSION=${VERSION#v}
            echo "clean-version=${CLEAN_VERSION}" >> $GITHUB_OUTPUT
            echo "üì¶ Clean version: $CLEAN_VERSION"
            
            # Check if this is a prerelease (contains hyphen after version)
            if echo "$CLEAN_VERSION" | grep -q '-'; then
              echo "is-prerelease=true" >> $GITHUB_OUTPUT
              echo "üöß Prerelease version detected"
            else
              echo "is-prerelease=false" >> $GITHUB_OUTPUT
              echo "üéØ Stable release version detected"
            fi
          else
            echo "‚ùå Invalid tag format: $VERSION"
            echo ""
            echo "Expected format: v?X.Y.Z(-prerelease)?"
            echo "Valid examples:"
            echo "  - v1.0.0"
            echo "  - 1.0.0" 
            echo "  - v0.1.0-alpha.1"
            echo "  - 2.0.0-beta.2"
            echo ""
            echo "Your tag '$VERSION' does not match the semantic version pattern."
            exit 1
          fi

      - name: Check if PR image exists
        if: steps.extract-pr.outputs.pr-number != ''
        id: check-pr-image
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          
          REPO_NAME="${{ steps.normalize-repo.outputs.repo-name }}"
          PR_NUMBER="${{ steps.extract-pr.outputs.pr-number }}"
          SOURCE_IMAGE="${{ env.REGISTRY }}/${REPO_NAME}:pr-${PR_NUMBER}"
          
          echo "üîç Checking if PR image exists: $SOURCE_IMAGE"
          
          if docker manifest inspect "$SOURCE_IMAGE" > /dev/null 2>&1; then
            echo "‚úÖ PR image found: $SOURCE_IMAGE"
            echo "image-exists=true" >> $GITHUB_OUTPUT
            echo "source-image=${SOURCE_IMAGE}" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è PR image not found: $SOURCE_IMAGE"
            echo "üîß Will build from scratch instead"
            echo "image-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Retag PR image as release
        if: steps.extract-pr.outputs.pr-number != '' && steps.check-pr-image.outputs.image-exists == 'true'
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          
          REPO_NAME="${{ steps.normalize-repo.outputs.repo-name }}"
          VERSION="${{ github.event.release.tag_name }}"
          PR_NUMBER="${{ steps.extract-pr.outputs.pr-number }}"
          SOURCE_IMAGE="${{ steps.check-pr-image.outputs.source-image }}"
          IS_PRERELEASE="${{ steps.validate-tag.outputs.is-prerelease }}"
          
          # Use validated clean version from previous step
          CLEAN_VERSION="${{ steps.validate-tag.outputs.clean-version }}"
          
          # Target tags
          VERSION_TAG="${{ env.REGISTRY }}/${REPO_NAME}:${CLEAN_VERSION}"
          MAIN_TAG="${{ env.REGISTRY }}/${REPO_NAME}:main"
          
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            echo "üöÄ Retagging PR image for ${{ matrix.app }} (prerelease)"
            echo "üì¶ Source: pr-${PR_NUMBER} ‚Üí ${CLEAN_VERSION}"
          else
            echo "üöÄ Retagging PR image for ${{ matrix.app }} (stable release)"
            echo "üì¶ Source: pr-${PR_NUMBER} ‚Üí ${CLEAN_VERSION}, main"
          fi
          
          # Pull the PR image
          docker pull "$SOURCE_IMAGE"
          
          # Tag with version
          echo "üè∑Ô∏è Tagging as: $VERSION_TAG"
          docker tag "$SOURCE_IMAGE" "$VERSION_TAG"
          docker push "$VERSION_TAG"
          
          # Only tag as main for stable releases
          if [[ "$IS_PRERELEASE" == "false" ]]; then
            echo "üè∑Ô∏è Tagging as: $MAIN_TAG (stable release)"
            docker tag "$SOURCE_IMAGE" "$MAIN_TAG"
            docker push "$MAIN_TAG"
          else
            echo "‚è© Skipping main tag (prerelease)"
          fi
          
          echo "‚úÖ Successfully retagged ${{ matrix.app }} release images"

      - name: Build release from scratch (fallback)
        if: steps.extract-pr.outputs.pr-number == '' || (steps.extract-pr.outputs.pr-number != '' && steps.check-pr-image.outputs.image-exists == 'false')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.validate-tag.outputs.is-prerelease == 'false' && format('{0}/{1}:{2},{0}/{1}:main', env.REGISTRY, steps.normalize-repo.outputs.repo-name, steps.validate-tag.outputs.clean-version) || format('{0}/{1}:{2}', env.REGISTRY, steps.normalize-repo.outputs.repo-name, steps.validate-tag.outputs.clean-version) }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
            TURBO_TEAM=${{ secrets.TURBO_TEAM }}

      - name: Release tagging complete
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          
          VERSION="${{ github.event.release.tag_name }}"
          CLEAN_VERSION="${{ steps.validate-tag.outputs.clean-version }}"
          REPO_NAME="${{ steps.normalize-repo.outputs.repo-name }}"
          IS_PRERELEASE="${{ steps.validate-tag.outputs.is-prerelease }}"
          
          echo "üéâ ${{ matrix.app }} tagged with version $VERSION"
          echo "üì¶ Available tags:"
          echo "   - ${REPO_NAME}:${CLEAN_VERSION}"
          
          if [[ "$IS_PRERELEASE" == "false" ]]; then
            echo "   - ${REPO_NAME}:main"
          else
            echo "   (main tag skipped for prerelease)"
          fi
